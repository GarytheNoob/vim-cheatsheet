" ================================================================================
" Author: chloneda <chloneda@163.com>
" Repository: https://github.com/chloneda/vim-cheatsheet
" Blog: https://www.cnblogs.com/chloneda
" Create Date: 2022-02-01
" Desc:  Windows 系统下 GVim 的定制化配置文件
" License: MIT
" ================================================================================
"
" +----------+-------------------------------------------------------------------
" | Key      | Function
" +----------+-------------------------------------------------------------------
" | F1       | 取消 Vim 查找高亮显示
" | F2       | 打开(或关闭)显示行号
" | F3       | 显示非可见字符
" | F4       | 设置代码自动折行
" | F5       | 删除所有空行
" | F6       | 打开(或关闭) 语法高亮
" | F7       | 自动补全代码
" | F8       | 普通模式打开 md 预览
" | F9       | 普通模式关闭 md 预览
" | F10      | 新建标签页
" | F11      | 非空行后间隔（加入空行）
" | F12      |
" | <Ctrl+c> | 快速推出 Vim（:qall!）
" +----------+-------------------------------------------------------------------
" Notes:
"   1、Vim 脚本注释是以 " 开头的，只存在行注释，不存在块注释
"   2、本文档中的 <Leader> 前缀键是指 "\" 键
"   3、本文档按功能、再按按键进行映射设置，力求分类明了，方便记忆
"   4、Windows 系统的 GVim 配置具有特殊性，该文档为 Win 系统通用 GVim 配置文件
" ================================================================================

" 设置 Vim 字体，字体名称和尺寸是以冒号（:）分隔的；字体尺寸以字母 h 为前缀
set guifont=fixedsys:h14:cGB2312:qDRAFT

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 外观设置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
color elflord                   " 配置 GVim 自定义配色主题
set number                      " 显示行号
set showtabline=2               " 显示标签栏，为 0 时不显示标签栏
set relativenumber              " 行号以相对当前行的方式显示，方便跳转
set cursorline                  " 突出显示当前行
set cursorcolumn                " 突出显示当前列
set background=dark             " Theme 主题
set t_Co=256                    " 指定配色方案是 256 色

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 主要配置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable                   " 启用语法高亮度
syntax on                       " 开启语法高亮
set history=1000                " 记录 1000 条历史命令
set magic                       " 设置魔术
set showcmd                     " 输入的命令显示出来
set hlsearch                    " 高亮搜索的字符串
set incsearch                   " 即时搜索
set wrap                        " 设置代码自动折行
set fileformat=unix             " 设置以 UNIX 的格式保存文件
set cindent                     " 设置 C 样式的缩进格式
set tabstop=4                   " Tab 显示多少个空格，默认 8
set softtabstop=4               " 统一缩进为 4
set shiftwidth=4                " 每一级缩进是多少个空格
set smartindent                 " 开启智能缩进
set autoindent                  " 开启自动缩进
set backspace=2                 " 设置退格键可用，正常处理indent,eol,start
set scrolloff=5                 " 光标距离顶部和底部 5 行
set laststatus=2                " 命令行为两行
set cmdheight=2                 " 总是显示状态行
set autoindent                  " 启用自动对齐功能，把上一行的对齐格式应用到下一行
set clipboard+=unnamed          " 共享剪贴板
set showmatch                   " 高亮显示匹配的括号
set showmode                    " 显示我们当前所处的模式
set matchtime=1                 " 匹配括号高亮的时间（单位是十分之一秒）
set autoread                    " 设置当文件被改动时自动载入
set autowrite                   " 自动保存
set guitablabel=%N%t%M          " 标签页显示 Number+文件名和+符号，不显示完整路径+文件名，方便切换标签页

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 其他配置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype on                     " 检测文件类型
filetype indent on              " 为特定文件类型载入相关缩进文件
filetype plugin on              " 允许载入文件类型插件
filetype plugin indent on       " Vim 对不同类型的文件进行补全时，设置不同文件类型的补全函数，需要打开文件类型检测
set completeopt=longest,menu    " 打开预览窗口会导致下拉菜单抖动，一般都去掉预览窗口的显示
set mouse=a                     " 启用鼠标
set noeb                        " 去掉输入错误的提示声音
set ruler                       " 显示光标当前位置
set title                       " Show file in titlebar
set foldmethod=indent           " 基于缩进进行代码折叠
set nofoldenable                " 启动 Vim 时关闭折叠
set selection=exclusive         " 指定在选择文本时光标所在位置也属于被选中的范围
set selectmode=mouse,key        " 使鼠标和键盘都可以控制光标选择文本
set ignorecase                  " 搜索忽略大小写
set smartcase                   " 智能大小写敏感，只要有一个字母大写，就大小写敏感，否则不敏感
set noexpandtab                 " 不允许用空格代替制表符
set whichwrap+=<,>,h,l          " 允许 Backspace 和光标键跨越行边界
set confirm                     " 在处理未保存或只读文件的时候，弹出确认
set nobackup                    " 禁止备份
set noswapfile                  " 禁止生成临时文件
set noundofile                  " 不生成 undo 文件
set report=0                    " 通过使用 :commands 命令，告诉我们文件的哪一行被改变过
set equalalways                 " 分割窗口时保持相等的宽/高
set splitright                  " 竖直 split 时，在右边开启
set splitbelow                  " 水平 split 时，在下边开启
set viminfo+=!                  " 保存全局变量
set iskeyword+=_,$,@,%,#,-      " 带有如下符号的单词不要被换行分割

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 按键映射
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 尽量使用 nnoremap 代替 nmap，比如： :map 递归映射，可以映射的模式：normal, visual, operator-pending
" nmap j k                      " nmap 是递归映射，会出现不可预期的问题
" nmap k G                      " 当按下 j 键时，实际上执行的是 G 键
" let mapleader = ","           " 定义 <Leader> 前缀键由 "\" 变为 ","
map Y y$                        " 复制 从光标到行尾 所在范围的文本
nmap <C-A> ggVG                 " 全选

" \v 从公共剪贴板粘贴。<Leader> 为用户自定义命令的名字空间，<Leader> 是前缀键即 "\"
inoremap <Leader>v <Esc>"+pa    " 插入模式下粘贴
nnoremap <Leader>v "+p          " 普通模式下粘贴
vnoremap <Leader>v "+p          " 可视模式下粘贴
inoremap <Leader>p <Esc>pa      " 插入模式粘贴
nnoremap <Leader><Leader>p "+p  " 将系统剪切板内容粘贴到 Vim
vnoremap <Leader><Leader>y "+y  " 复制当前选中到系统剪切板

nnoremap <Leader>h <C-W>h       " 切换到左边的分割窗口
nnoremap <Leader>j <C-W>j       " 切换到下面的分割窗口
nnoremap <Leader>k <C-W>k       " 切换到上面的分割窗口
nnoremap <Leader>l <C-W>l       " 切换到右边的分割窗口

" 分割窗口后通过前缀键 "\" 和方向键 调整窗口大小
nnoremap <Leader><Up>    :resize +5<CR>            " 多窗口时，将当前窗口的高度增加 5 行
nnoremap <Leader><Down>  :resize -5<CR>            " 多窗口时，将当前窗口的高度减少 5 行
nnoremap <Leader><Right> :vertical resize +5<CR>   " 多窗口时，将当前窗口的宽度增加 5 列
nnoremap <Leader><Left>  :vertical resize -5<CR>   " 多窗口时，将当前窗口的宽度减少 5 列

" 无论是 Normal/Insert 模式，按 Ctrl+s 保存文件
nnoremap <C-s> :wq!<CR>         " Normal 模式，按 Ctrl+s 保存文件并退出
inoremap <C-s> <Esc>:w<CR>a     " Insert 模式，按 Ctrl+s 保存文件并重新进入插入模式
inoremap <C-f> <Esc>^           " 在插入模式下快速进行行首跳转
inoremap <C-e> <Esc>$           " 在插入模式下快速进行行尾跳转
nnoremap gh ^                   " 在一般模式下快速进行行首跳转
nnoremap gl $                   " 在一般模式下快速进行行尾跳转

inoremap vv <Esc>               " 插入模式下的 vv 键为 Esc 键
vnoremap vv <Esc>               " 可视模式下的 vv 键为 Esc 键
inoremap jj <Esc>               " 插入模式下的 jj 键为 Esc 键
inoremap jk <Esc>               " 插入模式下的 jk 键为 Esc 键

" 插入模式下，常用标点符号自动补全
inoremap ( ()<Esc>i
inoremap [ []<Esc>i
inoremap { {}<Esc>i
inoremap < <><Esc>i
inoremap " ""<Esc>i
inoremap ' ''<Esc>i
inoremap ` ``<ESC>i

" Vim 搜索结果居中展示，silien 命令（sil[ent][!] {command}）用于安静地执行命令，既不显示正常的消息，也不会把它加进消息历史
nnoremap <silent> n nzz         " 正向重复上一次搜索并居中显示结果
nnoremap <silent> N Nzz         " 反向重复上一次搜索并居中显示结果
nnoremap <silent> * *zz         " 向后搜索光标所在的单词并居中显示结果
nnoremap <silent> # #zz         " 向前搜索光标所在的单词并居中显示结果
nnoremap <silent> g* g*zz

nnoremap }   }zz                " 向前移动一个段落并居中显示
nnoremap {   {zz                " 向后移动一个段落并居中显示
nnoremap ]]  ]]zz               " 跳转到下一个顶层函数并居中显示
nnoremap [[  [[zz               " 跳转到上一个顶层函数并居中显示
nnoremap []  []zz               " 跳转到上一个第一列的 } 并居中显示
nnoremap ][  ][zz               " 跳转到下一个第一列的 } 并居中显示

" 加快视口的滚动速度
nnoremap <C-e> 3<C-e>           " 向上滚动 3 行
nnoremap <C-y> 3<C-y>           " 向下滚动 3 行

" 戒掉使用方向键的习惯，善用 h j k l 移动光标
nnoremap <Up> <Nop>             " 普通模式下，禁用向上方向键
nnoremap <Down> <Nop>           " 普通模式下，禁用向下方向键
nnoremap <Left> <Nop>           " 普通模式下，禁用向左方向键
nnoremap <Right> <Nop>          " 普通模式下，禁用向右方向键

" 插入模式禁用方向键，解决办法呢？ 1、退出插入模式使用 h j k l； 2、重新映射方向键，如下
inoremap <Up> <Nop>             " 插入模式下，禁用向上方向键
inoremap <Down> <Nop>           " 插入模式下，禁用向下方向键
inoremap <Left> <Nop>           " 插入模式下，禁用向左方向键
inoremap <Right> <Nop>          " 插入模式下，禁用向右方向键

" 插入模式上下左右 按键映射
inoremap <C-h> <Left>           " 插入模式下，Ctrl + h 组合键 映射为向左方向键
inoremap <C-j> <Down>           " 插入模式下，Ctrl + j 组合键 映射为向下方向键
inoremap <C-k> <Up>             " 插入模式下，Ctrl + k 组合键 映射为向上方向键
inoremap <C-l> <Right>          " 插入模式下，Ctrl + l 组合键 映射为向右方向键

nnoremap U <C-r>                   " 取消撤销操作，减少按键操作
nnoremap <F1> :nohls<CR>           " 取消 Vim 查找高亮显示
nnoremap <F2> :set nu! nu?<CR>     " 普通模式下按 F2 打开(或关闭)显示行号
nnoremap <F3> :set list! list?<CR> " 显示非可见字符，如制表符被显示为 “^I”，而行尾则标识为 “$”。
nnoremap <F4> :set wrap! wrap?<CR> " 设置代码自动折行
nnoremap <F5> :g/^\s*$/d<CR>       " 去空行
nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>      " 普通模式下按 F6 打开(或关闭) 语法高亮
inoremap <F7> <C-X><C-O>           " 按下 F7 自动补全代码，注意该映射语句后不能有其他字符，包括 Tab；否则按下 F3 会自动补全一些乱码
nnoremap <F10> <Esc>:tabnew<CR>    " 指定 F10 键来新建标签页

nnoremap <S-Enter> o<Esc>k         " 普通模式下插入空行

" 普通模式下，标签页导航 按键映射
nnoremap <Leader>1 1gt                           " 切换到第 1 个标签页
nnoremap <Leader>2 2gt                           " 切换到第 2 个标签页
nnoremap <Leader>3 3gt                           " 切换到第 3 个标签页
nnoremap <Leader>4 4gt                           " 切换到第 4 个标签页
nnoremap <Leader>5 5gt                           " 切换到第 5 个标签页
nnoremap <Leader>6 6gt                           " 切换到第 6 个标签页
nnoremap <Leader>7 7gt                           " 切换到第 7 个标签页
nnoremap <Leader>8 8gt                           " 切换到第 8 个标签页
nnoremap <Leader>9 9gt                           " 切换到第 9 个标签页
nnoremap <Leader>0 :tablast<CR>                  " 切换到最后一个标签页
nnoremap <C-Insert> :tabnew<CR>                  " 新建标签页
nnoremap <C-Delete> :tabclose<CR>                " 关闭当前的标签页
nnoremap <silent><Tab>s :tabs<CR>                " 查看所有打开的标签页
nnoremap <silent><Tab>w :tabnew<CR>              " 新建标签页
nnoremap <silent><Tab>e :tabedit<CR>             " 新建标签页并编辑
nnoremap <silent><Tab>o :tabonly<CR>             " 关闭所有其他的标签页
nnoremap <silent><Tab>c :tabclose<CR>            " 关闭当前的标签页
nnoremap <silent><Tab>n :tabnext<CR>             " 移动到后一个标签页
nnoremap <silent><Tab>p :tabprevious<CR>         " 移动到前一个标签页
nnoremap <silent><Tab>r :tabrewind<CR>           " 切换到第一个标签页
nnoremap <silent><Tab>h :h tabpage<CR>           " 查看标签页帮助文档
nnoremap <silent><s-tab> :tabnext<CR>            " 按 Shift + Tab 组合键，移动到后一个标签页
inoremap <silent><s-tab> <Esc>:tabnext<CR>       " 按 Shift + Tab 组合键，退出插入模式并移动到后一个标签页

" 缩进后依然保持选中
xnoremap <  <gv
xnoremap >  >gv

" Using very magic mode
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %s/\v
nnoremap :g/ :g/\v

" 文件保存退出命令映射
" :command W w!                    " 映射为 为超级用户权限保存文件
:command WQ wq                     " 文件保存退出保存，避免大写转换小写
:command Wq wq
" :W 以超级用户权限保存文件
command W w !sudo tee % > /dev/null
:command Q q
:command Qa qa
:command QA qa                     " 快速退出 Vim，避免大写转换小写
nnoremap <Leader>q :q!<CR>         " Quickly close the current window
nnoremap <Leader>w :w!<CR>         " Quickly save the current file
nnoremap <C-c> :qall!<CR>          " 快速退出 Vim

nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>           " Set current directory to current file with ,cd
nnoremap <Leader>cc :!start cmd /k cd %:p:h:8<CR>   " open windows command prompt in the current file's directory
nnoremap <Leader>ce :!start explorer %:p:h:8<CR>    " open explorer in the current file's directory
nnoremap <Space> za                                 " Space 空格键切换折叠

nnoremap <Leader>W :%s/\s\+$//<CR>:let @/=''<CR>    " 删除当前文件中所有的行尾多余空格
" 一键去除全部尾部空白(\rb)
inoremap <Leader>rb <Esc>:let _s=@/<bar>:%s/\s\+$//e<bar>:let @/=_s<bar>:nohl<CR>
nnoremap <Leader>rb :let _s=@/<bar>:%s/\s\+$//e<bar>:let @/=_s<bar>:nohl<CR>
vnoremap <Leader>rb <Esc>:let _s=@/<bar>:%s/\s\+$//e<bar>:let @/=_s<bar>:nohl<CR>
" 一键去除全部 ^M 字符(\rm)
inoremap <Leader>rm <Esc>:%s/<c-v><c-m>//g<CR>
nnoremap <Leader>rm :%s/<c-v><c-m>//g<CR>
vnoremap <Leader>rm <Esc>:%s/<c-v><c-m>//g<CR>
" 一键替换全部 Tab 为空格(\rt)
nnoremap <Leader>rt <Esc>:retab<CR>
" 一键清理当前代码文件(\d)
nnoremap <Leader>d <Esc>ggVGd

" unmap <F10>                      " 取消一个映射
" mapclear                         " 对应取消所有 :map 绑定的，慎用

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimrc 配置文件按键映射
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <Leader>tv :tabe $MYVIMRC<CR>  " 新标签页编辑配置文件
nnoremap <Leader>e <Esc>:edit $MYVIMRC<CR>       " 当前窗口编辑配置文件
nnoremap <Leader>ev :vsp $MYVIMRC<CR>            " 纵向分屏编辑配置文件
nnoremap <Leader>sv :source $MYVIMRC<CR>         " 重新加载 vimrc 文件，source 可缩写为 so
autocmd BufWritePost $MYVIMRC source $MYVIMRC    " 让 vimrc 配置变更立即生效

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 插件按键映射
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 查看、安装、更新、删除插件 按键映射
nnoremap <Leader><Leader>s :PlugStatus<CR>      " 查看插件状态
nnoremap <Leader><Leader>i :PlugInstall<CR>     " 安装在配置文件中声明的插件
nnoremap <Leader><Leader>u :PlugUpdate<CR>      " 更新插件
nnoremap <Leader><Leader>g :PlugUpgrade<CR>     " 升级 vim-plug 本身
nnoremap <Leader><Leader>d :PlugDiff<CR>        " 查看插件的变化状态，简单地回滚有问题的插件
nnoremap <Leader><Leader>c :PlugClean<CR>       " 删除插件

" 预览插件 Markdown-preview 按键映射
nmap <silent> <F8> <Plug>MarkdownPreview        " 普通模式打开 md 预览
imap <silent> <F8> <Plug>MarkdownPreview        " 插入模式打开 md 预览
nmap <silent> <F9> <Plug>StopMarkdownPreview    " 普通模式关闭 md 预览
imap <silent> <F9> <Plug>StopMarkdownPreview    " 插入模式关闭 md 预览

" 插件 NERDTree 按键映射
nnoremap <Leader>n :NERDTreeToggle<CR>
" nnoremap <Leader>n :NERDTreeFocus<CR>
" nnoremap <Leader>N :NERDTreeClose<CR>
nnoremap <Leader>f :NERDTreeFind<CR>

"autocmd vimenter * NERDTree    " 自动开启 Nerdtree
"let g:NERDTreeWinSize = 25     " 设定 NERDTree 视窗大小
let NERDTreeShowBookmarks=1    " 开启 Nerdtree 时自动显示 Bookmarks
" 隐藏指定文件和文件夹
let NERDTreeIgnore = ['\.pyc$', '\.swp', '\.swo', '\.vscode', '__pycache__']
" 打开 Vim 时如果没有文件自动打开 NERDTree
" autocmd vimenter * if !argc()|NERDTree|endif
" 当 NERDTree 为剩下的唯一窗口时自动关闭
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endi

" 插件 Tarbar 按键映射
nnoremap <Leader>t :TagbarToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 插件列表
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 需要提前安装 vim-plug 管理插件
call plug#begin('~/.vim/plugged')

" Apperance
Plug 'morhetz/gruvbox'                   " 界面配色方案
Plug 'vim-airline/vim-airline'           " Vim 状态栏提供更优秀的显示功能

" Development
Plug 'preservim/nerdcommenter'           " Vim 批量注释工具
Plug 'tpope/vim-surround'                " 添加，修改，删除括号、引号等成对的符号，甚至是 HTML 标签
Plug 'tpope/vim-repeat'                  " 解决 Vim 原生命令 . 在自定义映射或插件映射时无法重复的问题
Plug 'majutsushi/tagbar'                 " 侧边栏显示文件中定义的常量、变量、函数等，善于 Shift + ? 查看帮助

" File manage
Plug 'mhinz/vim-startify'                " Vim 启动插件
Plug 'preservim/nerdtree'                " 显示 Vim 目录树插件，常与 Tarbar、Ctrlp 搭配使用
Plug 'Xuyuanp/nerdtree-git-plugin'       " 显示 NERDTree 目录树的 Git 状态信息

" Markdown
Plug 'iamcco/mathjax-support-for-mkdp'   " 用于 Markdown 预览数学公式
Plug 'iamcco/markdown-preview.vim'       " Markdown 预览工具

" Github
Plug 'airblade/vim-gitgutter'            " Git 侧边栏插件
Plug 'tpope/vim-fugitive'                " 在 Vim 中使用 Git 命令

" Search
" Plug 'Yggdroot/LeaderF'                " 查找文件非常方便
Plug 'easymotion/vim-easymotion'         " 快速定位
Plug 'ctrlpvim/ctrlp.vim'                " 内容、文件、缓冲区和标签模糊搜索插件

" Initialize plugin system
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 插件 NERDTree-git 自定义配置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDTreeGitStatusIndicatorMapCustom= {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" End
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


